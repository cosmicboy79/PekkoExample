/*
 * This file was initially generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    // Used for testing
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    // Used by the application.
    implementation platform(libs.pekko.bom)
    implementation libs.pekko.actor.typed
}

test {
    useJUnitPlatform()
    include '**/Test*.class'
    testLogging {
        events "started", "passed", "failed", "skipped"
    }
}

group = 'edu.pekko.sample'
version = '1.0-SNAPSHOT'
description = 'Actor Model Sample App on Java using Apache Pekko'
java.sourceCompatibility = '21'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

jar {
    archiveBaseName = "sample-pekko-$project.name-all"
    manifest {
        attributes 'Implementation-Title' : 'Sample Pekko App',
                'Implementation-Version' : version,
                'Main-Class' : 'edu.pekko.sample.app.TransactionsProcessor'
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        project.configurations.runtimeClasspath.collect {
            File file -> {

                if (file.getName().contains("actor-typed")) {
                    project.zipTree(file).matching {
                        // file "reference.conf" is duplicated, i.e.,
                        // it exists in both akka typed and untyped
                        // actor JAR's
                        // however, in the typed one, this file does
                        // not contain the "akka.loggers" configuration
                        // because of that, it will be excluded
                        exclude "reference.conf"
                    }
                }
                else {
                    project.zipTree(file)
                }
            }
        }
    }
}
